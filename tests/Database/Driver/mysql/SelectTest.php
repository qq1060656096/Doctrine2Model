<?php
namespace Wei\Base\Tests\Database\Driver\mysql;


use Wei\Base\Database\Driver\mysql\Select;
use Wei\Base\Database\Query\ConnectionFactor;
use Wei\Base\Tests\WeiTestCase;

class SelectTest extends WeiTestCase
{
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        ConnectionFactor::getInstance()->delete('test', ['name' => '20170517--1149']);
        $values = [
            'name' => '20170517--1149',
            'age' => 1601,
            'uid' => 1602,
            'created' => '2017-05-17 11:49',
        ];
        ConnectionFactor::getInstance()->insert('test', $values);

    }

    /**
     * 测试查询字段
     */
    public function testFields()
    {
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->fields(['id', 'name']);
        $this->assertEquals(['id', 'name'], $obj->getFields());

        //添加查询字段
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->fields('id,name,age');
        $this->assertEquals(['id', 'name', 'age'], $obj->getFields());
        $obj->addFields(['uid','created']);
        $this->assertEquals(['id', 'name', 'age', 'uid', 'created'], $obj->getFields());
    }

    /**
     * 测试关联查询
     */
    public function testJoin()
    {
        // 内连接
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->innerJoin('test test2', 'test.id = test2.id');
        $join[] = [
            'type' => 'INNER JOIN',
            'table' => 'test test2',
            'condition' => 'test.id = test2.id',
            'arguments' => []
        ];
        $this->assertEquals($join, $obj->getJoin());

        // 左连接
        $join[] = [
            'type' => 'LEFT JOIN',
            'table' => 'left',
            'condition' => 'left.id = ?',
            'arguments' => ['test.id']
        ];
        $obj->leftJoin('left', 'left.id = ?', ['test.id']);
        $this->assertEquals($join, $obj->getJoin());

        // 右连接
        $join[] = [
            'type' => 'RIGHT JOIN',
            'table' => 'right',
            'condition' => 'right.id = ?',
            'arguments' => ['left.id']
        ];
        $obj->rightJoin('right', 'right.id = ?', ['left.id']);
        $this->assertEquals($join, $obj->getJoin());
    }

    /**
     * 测试排序
     */
    public function testOrder()
    {
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->orderBy('id');
        $obj->orderBy('name','DESC');
        $data = [
            'id' => 'ASC',
            'name' => 'DESC'
        ];
        $this->assertEquals($data, $obj->getOrderBy());
    }

    /**
     * 测试分组
     */
    public function testGroup()
    {
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->groupBy('id');
        $obj->groupBy('name');
        $data = [
            'id' => 'id',
            'name' => 'name',
        ];
        $this->assertEquals($data, $obj->getGroupBy());
    }

    /**
     * 测试offset
     */
    public function testOff()
    {
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->offset(20);
        $this->assertEquals('20', $obj->getOffset());
        $obj->offset(0);
        $this->assertEquals('0', $obj->getOffset());
        $obj->offset(-1);
        $this->assertEquals('0', $obj->getOffset());
    }
    /**
     * 返回多少条数据
     */
    public function testLimit()
    {
        $obj = new Select(ConnectionFactor::getInstance(), 'test');
        $obj->limit(20);
        $this->assertEquals('20', $obj->getLimit());
        $obj->limit(0);
        $this->assertEquals('0', $obj->getLimit());
        $obj->limit(-1);
        $this->assertEquals('0', $obj->getLimit());
    }
}