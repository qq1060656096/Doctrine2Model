<?php
namespace Wei\Base\Tests\DB;

use Wei\Base\DB\PdoQuery;
use Wei\Base\DB\Query;
use Wei\Base\Tests\WeiTestCase;

class PdoQueryTest extends WeiTestCase
{
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        $query = new Query();
        $query->from('test');
        $query->where([
            'name' => [
                'op' => 'like',
                '20170510-%'
            ]
        ])->delete();
        $query->where([
            'name' => [
                'op' => 'like',
                '20170510--2224-update%'
            ]
        ])->delete();
        self::setFixture();
        self::setFixtureForTestDelete();

    }



    /**
     * 通用基镜
     */
    public static function setFixture()
    {

    }

    /**
     * 测试查询字段[select]
     */
    public function testSelect()
    {
        //字符串字段查询
        $pdoQuery = new PdoQuery();
        $pdoQuery->select('id,name,age');
        list($str, $params) = $pdoQuery->getSelect();
        $this->assertEquals('?,?,?', $str);
        $this->assertEquals(['id', 'name', 'age'], $params);

        //空字符串字段查询
        $pdoQuery = new PdoQuery();
        $pdoQuery->select('');
        list($str, $params) = $pdoQuery->getSelect();
        $this->assertEquals('', $str);
        $this->assertEquals([], $params);


        //数组字段查询
        $pdoQuery = new PdoQuery();
        $pdoQuery->select(['id', 'name', 'age']);
        list($str, $params) = $pdoQuery->getSelect();
        $this->assertEquals('?,?,?', $str);
        $this->assertEquals(['id', 'name', 'age'], $params);

        //数组空字段查询
        $pdoQuery = new PdoQuery();
        $pdoQuery->select([]);
        list($str, $params) = $pdoQuery->getSelect();
        $this->assertEquals('', $str);
        $this->assertEquals([], $params);



    }

    /**
     * 测试查询字段[select]
     */
    public function testSelectAddSelect()
    {
        //数组查询再追加数组查询再追加字符
        $pdoQuery = new PdoQuery();
        $pdoQuery->select(['id','age']);
        $pdoQuery->addSelect(['uid','name']);
        $pdoQuery->addSelect('created');
        $pdoQuery->addSelect('');
        $pdoQuery->addSelect([]);
        list($str, $params) = $pdoQuery->getSelect();
        $this->assertEquals('?,?,?,?,?', $str);
        $this->assertEquals(['id', 'age', 'uid', 'name', 'created'], $params);

    }

    /**
     * 测试[from]
     */
    public function testFrom()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->from('wei_test');
        $this->assertEquals('wei_test', $pdoQuery->getFrom());
    }

    /**
     * 测试空表名
     * @expectedException \Wei\Base\Exception\QueryException
     */
    public function testFormThrowException()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->getFrom();
    }

    /**
     * 测试where条件
     */
    public function testWhere()
    {
        //字符串where
        $pdoQuery = new PdoQuery();
        $pdoQuery->where('id=1 and name=2');
        list($str, $params) = $pdoQuery->getWhere();
        $this->assertEquals('?', $str);
        $this->assertEquals(['id=1 and name=2'], $params);

        //数组where
        $pdoQuery = new PdoQuery();
        $pdoQuery->where(['id' => 1]);
        list($str, $params) = $pdoQuery->getWhere();
        $this->assertEquals('id = ?', $str);
        $this->assertEquals([1], $params);

        //数组where
        $pdoQuery = new PdoQuery();
        $pdoQuery->where(['id' => 1, 'name' => 'xiao']);
        list($str, $params) = $pdoQuery->getWhere();
        $this->assertEquals('id = ? and name = ?', $str);
        $this->assertEquals([1, 'xiao'], $params);

        //数组like where
        $where = [
            'name' => [
                'op' => 'like',
                'test%'
            ]
        ];
        $pdoQuery = new PdoQuery();
        $pdoQuery->where($where);
        list($str, $params) = $pdoQuery->getWhere();
        $this->assertEquals('name like ?', $str);
        $this->assertEquals(['test%'], $params);

        //数组常用where
        $where = [
            'id' => 3,
            'name' => [
                'on' => 'and',
                'op' => 'in',
                'rawValue' => "('test1','test2')",
            ],
            'age' => [
                'on' => 'or',
                'op' => '>=',
                '5',
            ],
            '`age`' => [
                'on' => 'or',
                'op' => '<=',
                'rawValue' => 10,
            ],
            'tid' => [
                'on' => 'OR',
                'op' => '<=',
                'rawValue' => 11,
            ]
        ];
        $pdoQuery = new PdoQuery();
        $pdoQuery->where($where);
        list($str, $params) = $pdoQuery->getWhere();
        $this->assertEquals('id = ? and name in ? or age >= ? or `age` <= ? or tid <= ?', $str);
        $this->assertEquals([3, "('test1','test2')", "5", 10, 11], $params);

    }

    /**
     * 测试where in
     */
    public function testWhereIn()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->where('id=1 and name=2');
        $pdoQuery->andWhere([
            'age' => [
                'op' => 'in',
                [20,30,40,50,100]
            ]
        ]);
        list($str, $params) = $pdoQuery->getWhere();
        $this->assertEquals('? and age in (?,?,?,?,?)', $str);
        $this->assertEquals(["id=1 and name=2", 20, 30, 40, 50 ,100], $params);
    }

    /**
     * 测试分组查询[group by ]
     */
    public function testGroupBy()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->groupBy(['name desc','age asc', 'id' => 'desc']);
        list($str, $params) = $pdoQuery->getGroupBy();
        $this->assertEquals('group by ?,?,?', $str);
        $this->assertEquals(["name desc", 'age asc', 'id desc'], $params);

        $pdoQuery->addGroupBy('tid,uid');
        list($str, $params) = $pdoQuery->getGroupBy();

        $this->assertEquals('group by ?,?,?,?,?', $str);
        $this->assertEquals(["name desc", 'age asc', 'id desc', 'tid', 'uid'], $params);

        $pdoQuery->groupBy("age desc,name");
        list($str, $params) = $pdoQuery->getGroupBy();
        $this->assertEquals('group by ?,?', $str);
        $this->assertEquals(['age desc', 'name'], $params);

    }

    /**
     * 测试排序[order by]
     */
    public function testOrderBy()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->orderBy([
            'age' => 'desc',
            'name' => 'asc',
            'uid' => 'desc',
        ]);
        list($str, $params) = $pdoQuery->getOrderBy();
        $this->assertEquals('order by ?,?,?', $str);
        $this->assertEquals(['age desc', 'name asc', 'uid desc'], $params);

        $pdoQuery->addOrderBy('id desc, tid desc');
        list($str, $params) = $pdoQuery->getOrderBy();
        $this->assertEquals('order by ?,?,?,?,?', $str);
        $this->assertEquals(['age desc', 'name asc', 'uid desc', 'id desc', 'tid desc'], $params);

        $pdoQuery->orderBy("id asc,tid desc");
        list($str, $params) = $pdoQuery->getOrderBy();
        $this->assertEquals('order by ?,?', $str);
        $this->assertEquals(['id asc', 'tid desc'], $params);

        $pdoQuery->addOrderBy([
            'age' => 'desc',
            'uid' => 'desc',
        ]);
        list($str, $params) = $pdoQuery->getOrderBy();
        $this->assertEquals('order by ?,?,?,?', $str);
        $this->assertEquals(['id asc', 'tid desc', 'age desc', 'uid desc'], $params);
    }

    /**
     * 测试offset
     */
    public function testOff()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->offset(20);
        $this->assertEquals('20', $pdoQuery->offset);

        $pdoQuery->offset(0);
        $this->assertEquals('0', $pdoQuery->offset);

        $pdoQuery->offset(-1);
        $this->assertEquals('0', $pdoQuery->offset);
    }

    /**
     * 返回多少条数据
     */
    public function testLimit()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->limit(20);
        $this->assertEquals('20', $pdoQuery->limit);

        $pdoQuery->limit(0);
        $this->assertEquals('0', $pdoQuery->limit);

        $pdoQuery->limit(-1);
        $this->assertEquals('0', $pdoQuery->limit);
    }

    /**
     * 测试连接
     */
    public function testJoin()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->join(PdoQuery::INNER_JOIN, 'test1','test.tid=demo.pid');
        $this->assertEquals('inner join test1 on test.tid=demo.pid', $pdoQuery->getJoin());

        $pdoQuery->join(PdoQuery::LEFT_JOIN, 'demo2');
        $this->assertEquals('inner join test1 on test.tid=demo.pid left join demo2', $pdoQuery->getJoin());

        $pdoQuery->join(PdoQuery::RIGHT_JOIN, 'demo3');
        $this->assertEquals('inner join test1 on test.tid=demo.pid left join demo2 right join demo3', $pdoQuery->getJoin());
    }

    /**
     * 内联查询
     */
    public function testInner()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->innerJoin('test', 'test.did=demo.id');
        $this->assertEquals('inner join test on test.did=demo.id', $pdoQuery->getJoin());

        $pdoQuery->innerJoin('demo2', 'demo.demo2_id=demo2.demo2_id');
        $this->assertEquals('inner join test on test.did=demo.id inner join demo2 on demo.demo2_id=demo2.demo2_id', $pdoQuery->getJoin());
    }

    /**
     * 左连查询
     */
    public function testLeftJoin()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->leftJoin('test', 'test.did=demo.id');
        $this->assertEquals('left join test on test.did=demo.id', $pdoQuery->getJoin());

        $pdoQuery->leftJoin('demo2', 'demo.lid=demo2.d2_lid');
        $this->assertEquals('left join test on test.did=demo.id left join demo2 on demo.lid=demo2.d2_lid', $pdoQuery->getJoin());
    }

    /**
     * 右连查询
     */
    public function testRightJoin()
    {
        $pdoQuery = new PdoQuery();
        $pdoQuery->rightJoin('test', 'test.did=demo.id');
        $this->assertEquals('right join test on test.did=demo.id', $pdoQuery->getJoin());

        $pdoQuery->rightJoin('demo2', 'demo.rid=demo2.d2_rid');
        $this->assertEquals('right join test on test.did=demo.id right join demo2 on demo.rid=demo2.d2_rid', $pdoQuery->getJoin());
    }

    /**
     * 设置删除基镜
     */
    public static function setFixtureForTestDelete()
    {

    }

    /**
     * 测试插入多行数据
     */
    public function testInsertAll()
    {
        $rows = [
            [
                '`name`' => '20170510--2224-insert1',
                'age' => 1,
                'uid' => 11,
                'created' => '2017-05-10 22:24',
            ],
            [
                '`name`' => '20170510--1728-insert2',
                'age' => 2,
                'uid' => 22,//插入原始数据
                'created' => '2017-05-10 17:28',
            ]
        ];
        $pdoQuery = new PdoQuery();
        $pdoQuery->from('`test`');
        $pdoQuery->enabledSqlLog();
        $result = $pdoQuery->insertAll($rows);
        $debugSql = $pdoQuery->getLastRawSql();
        $this->assertEquals('2', $result);
        $this->assertEquals("insert into test(?,?,?,?) values(?,?,?,?),(?,?,?,?);", $debugSql['rawSql']);
    }
    /**
     * 测试查询单行数据
     */
    public function testOne()
    {

    }

    /**
     * 测试查询多行记录
     *
     * @depends testOne
     */
    public function testAll()
    {

    }

    /**
     * 测试删除
     * @depends testOne
     */
    public function testDelete()
    {

    }
    /**
     * 测试最小查询
     * @depends testOne
     */
    public function testMin()
    {
    }

    /**
     * 测试最大值
     * @depends testOne
     */
    public function testMax()
    {

    }

    /**
     * 测试总和
     *
     * @depends testOne
     */
    public function testSum()
    {

    }

    /**
     * 测试平均值
     * @depends testOne
     */
    public function testAverage()
    {

    }

    /**
     * 测试统计
     * @depends testAverage
     */
    public function testCount()
    {


    }

    /**
     * 更改数据
     */
    public function testUpdate()
    {

    }

    /**
     * 批量更新
     * @depends testOne
     */
    public function testUpdataAll()
    {

    }

    public function test()
    {
        $str = '';
        $params = '';
        print_r($str);
        print_r($params);
    }
}